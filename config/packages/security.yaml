security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user) (e.g load/reload users form the database)
    app_user_provider:
      # This user provider knows how to (re)load users from a storage (e.g. a database) based on a "user identifier" (e.g. the user's email here).
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      # ce pare-feu exclue certains fichiers servent au dev front
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      # Le pare-feu: par défaut, toutes les routes passent par celui-ci car aucun pattern n'est donné
      lazy: true
      provider: app_user_provider
      form_login:
        # Bien préciser le nom de la route utilisée dans le controller
        login_path: signin
        check_path: signin
        enable_csrf: true
        # Le chemin de redirection après le signin
        default_target_path: profile
      logout:
        path: logout
        # where to redirect after logout
        target: signin

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/threads/(update|show|delete)/\d+$, roles: ROLE_USER }
    - { path: ^/threads/create, roles: ROLE_USER }
  role_hierarchy:
    ROLE_ADMIN: ROLE_USER

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
